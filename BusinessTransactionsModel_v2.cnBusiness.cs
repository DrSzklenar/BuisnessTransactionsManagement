//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 04. 10. 9:29:08
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace Business
{

    public partial class cnBusiness : DbContext
    {

        public cnBusiness() :
            base()
        {
            OnCreated();
        }

        public cnBusiness(DbContextOptions<cnBusiness> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Customer> Customers
        {
            get;
            set;
        }

        public virtual DbSet<Product> Products
        {
            get;
            set;
        }

        public virtual DbSet<TransactionItem> TransactionItems
        {
            get;
            set;
        }

        public virtual DbSet<Transaction> Transactions
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.CustomerMapping(modelBuilder);
            this.CustomizeCustomerMapping(modelBuilder);

            this.ProductMapping(modelBuilder);
            this.CustomizeProductMapping(modelBuilder);

            this.TransactionItemMapping(modelBuilder);
            this.CustomizeTransactionItemMapping(modelBuilder);

            this.TransactionMapping(modelBuilder);
            this.CustomizeTransactionMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Customer Mapping

        private void CustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().ToTable(@"Customers", @"dbo");
            modelBuilder.Entity<Customer>().Property(x => x.CustomerID).HasColumnName(@"CustomerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Customer>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Customer>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Customer>().Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType(@"nvarchar").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<Customer>().HasKey(@"CustomerID");
        }

        partial void CustomizeCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region Product Mapping

        private void ProductMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>().ToTable(@"Products", @"dbo");
            modelBuilder.Entity<Product>().Property(x => x.ProductID).HasColumnName(@"ProductID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Product>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Product>().Property(x => x.Price).HasColumnName(@"Price").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2);
            modelBuilder.Entity<Product>().HasKey(@"ProductID");
        }

        partial void CustomizeProductMapping(ModelBuilder modelBuilder);

        #endregion

        #region TransactionItem Mapping

        private void TransactionItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TransactionItem>().ToTable(@"TransactionItems", @"dbo");
            modelBuilder.Entity<TransactionItem>().Property(x => x.TransactionItemID).HasColumnName(@"TransactionItemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<TransactionItem>().Property(x => x.TransactionID).HasColumnName(@"TransactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TransactionItem>().Property(x => x.ProductID).HasColumnName(@"ProductID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TransactionItem>().Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TransactionItem>().HasKey(@"TransactionItemID");
        }

        partial void CustomizeTransactionItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region Transaction Mapping

        private void TransactionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Transaction>().ToTable(@"Transactions", @"dbo");
            modelBuilder.Entity<Transaction>().Property(x => x.TransactionID).HasColumnName(@"TransactionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Transaction>().Property(x => x.Date).HasColumnName(@"Date").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2);
            modelBuilder.Entity<Transaction>().Property(x => x.Status).HasColumnName(@"Status").HasColumnType(@"nvarchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property(x => x.CustomerID).HasColumnName(@"CustomerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Transaction>().HasKey(@"TransactionID");
        }

        partial void CustomizeTransactionMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().HasMany(x => x.Transactions).WithOne(op => op.Customer).HasForeignKey(@"CustomerID").IsRequired(true);

            modelBuilder.Entity<Product>().HasMany(x => x.TransactionItems).WithOne(op => op.Product).HasForeignKey(@"ProductID").IsRequired(true);

            modelBuilder.Entity<TransactionItem>().HasOne(x => x.Transaction).WithMany(op => op.TransactionItems).HasForeignKey(@"TransactionID").IsRequired(true);
            modelBuilder.Entity<TransactionItem>().HasOne(x => x.Product).WithMany(op => op.TransactionItems).HasForeignKey(@"ProductID").IsRequired(true);

            modelBuilder.Entity<Transaction>().HasMany(x => x.TransactionItems).WithOne(op => op.Transaction).HasForeignKey(@"TransactionID").IsRequired(true);
            modelBuilder.Entity<Transaction>().HasOne(x => x.Customer).WithMany(op => op.Transactions).HasForeignKey(@"CustomerID").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
